<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Drmshow]]></title>
  <link href="http://drmshow.github.io/atom.xml" rel="self"/>
  <link href="http://drmshow.github.io/"/>
  <updated>2016-05-06T16:01:13+08:00</updated>
  <id>http://drmshow.github.io/</id>
  <author>
    <name><![CDATA[Drmshow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[网络]]></title>
    <link href="http://drmshow.github.io/blog/20160506/wang-luo/"/>
    <updated>2016-05-06T15:59:13+08:00</updated>
    <id>http://drmshow.github.io/blog/20160506/wang-luo</id>
    <content type="html"><![CDATA[<p>网络管理
包交换网络：能实现多种不同的寻路
分层：一个复杂任务分成多个小任务</p>

<p>早期计算机使用的是同轴线缆设备，用T行头将很多电脑连到一根线上（同轴电缆），只有一个线芯，一根线连了N台机器，我们叫做总线型网络。假如有4台电脑ABCD，都有网络接口，且这个接口有唯一标识，就是地址。当A和C通信的时候，B和D不能进行通信，因为都连到一条线上，这时候线路繁忙。怎么解决A和C通信的时候，其他电脑不进行通信，知道线路繁忙。还有就是都没有通信的时候，这时候A和B同时发送信号，导致数据混乱</p>

<p>在一个网络中，多台电脑共享了底层的通信线路，我们就叫做共享通信信道
底层共享信道的争用：就是上面所描述的问题
怎么解决? MAC media access control 介质访问控制，主要功能就是介质访问的时候，谁能够用，谁不能够和一旦发生争用如何解决。 MAC地址就是在MAC控制下，需要实现数据传输时候用到的地址</p>

<p>带宽：网络带宽是指在单位时间(一般指的是1秒钟)内能传输的数据量
总线上传输的带宽是10M，那么就是说这条总线上的电脑发数据都要经过这条总线，数据都是直接发送的，满了就不行。好比连着多个出水口的水管，最大每秒只能出这么多水。
而交换机不一样的是：会每次存储各个端口的数据，然后经过一系列处理来占用整个总线进行数据传输
比如一个10M的交换机和集线器，集线器因为是单一总线结构，也就是所有的端口共享10M的带宽，而交换机是存储转发方式交换数据，因为是要将所有把输入端口的数据包先存储起来，然后进行CRC（循环冗余码校验）检查，在对错误包处理后才取出数据包的目的地址，通过查找表转换成输出端口送出包。正因如此，存储转发方式在数据处理时延时大，这是它的不足，但是它可以对进入交换机的数据包进行错误检测，有效地改善网络性能。理论上是每个端口都独享10M的带宽，所以当本地数据传输量很大的时候使用交换机的效率会比集线器快很多！</p>

<p>MAC控制机制：
先听后发 边听边发 冲突停止 随机延时在发
一种在共享介质条件下多点通讯的有效手段，其基本规则如下：
（1）若介质空闲，传输；否则，转2）；
（2）若介质忙，一直监听到信道空闲，然后立即传输；
（3）若在传输中测得冲突，则发出一个短小的人为干扰（jamming）信号，使得所有站点都知道发生了冲突并停止传输；
（4）发完人为干扰信号，等待一段随机的时间后，再次试图传输，回到1）重新开始。
总之，我们可以从三点来理解CSMA/CD:
1.CS：载波侦听。
在发送数据之前进行监听，以确保线路空闲，减少冲突的机会。
2.MA：多址访问。
每个站点发送的数据，可以同时被多个站点接收。
3.CD：冲突检测。
边发送边检测，发现冲突就停止发送，然后延迟一个随机时间之后继续发送。</p>

<p>1.CSMA/CD 载波多路访问/冲突检测
A要发送数据的时候，先检测网络是否处于繁忙状态，如果空闲，就立即向外发送数据报文，发了之后并不以为发送成功，（存在一种情况，C也同时检测了网络繁忙状态，也同时发送报文），边发边检测，看有没有冲突，有冲突立即停止发送，并后退（等一会再发），那么A也等C也等，假如都等了相同时间，再接着发，还是会冲突。所以这个等待时间是随机的，
CSMA/CD是一种争用型的介质访问控制协议。它起源于美国夏威夷大学开发的ALOHA网所采用的争用型协议，并进行了改进，使之具有比ALOHA协议更高的介质利用率。主要应用于现场总线Ethernet中。另一个改进是，对于每一个站而言，一旦它检测到有冲突，它就放弃它当前的传送任务。换句话说，如果两个站都检测到信道是空闲的，并且同时开始传送数据，则它们几乎立刻就会检测到有冲突发生。它们不应该再继续传送它们的帧，因为这样只会产生垃圾而已；相反一旦检测到冲突之后，它们应该立即停止传送数据。快速地终止被损坏的帧可以节省时间和带宽。
CSMA/CD控制方式的优点是：
原理比较简单，技术上易实现，网络中各工作站处于平等地位 ，不需集中控制，不提供优先级控制。但在网络负载增大时，发送时间增长，发送效率急剧下降。
CSMA/CD应用在 OSI 的第二层数据链路层
它的工作原理是: 发送数据前 先侦听信道是否空闲 ,若空闲，则立即发送数据。若信道忙碌，则等待一段时间至信道中的信息传输结束后再发送数据；若在上一段信息发送结束后，同时有两个或两个以上的节点都提出发送请求，则判定为冲突。若侦听到冲突,则立即停止发送数据，等待一段随机时间,再重新尝试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机基础]]></title>
    <link href="http://drmshow.github.io/blog/20160506/ji-suan-ji-ji-chu/"/>
    <updated>2016-05-06T09:44:17+08:00</updated>
    <id>http://drmshow.github.io/blog/20160506/ji-suan-ji-ji-chu</id>
    <content type="html"><![CDATA[<p>计算机= 硬件 + 软件</p>

<p>cpu：运算器、控制器封装成cpu
芯片生产完成之后能执行的操作叫做指令。指令的集合就是指令集。 指令集支持一定的编程机制，叫做微码编程 也叫汇编编程
指令集：芯片所能执行的操作。比如加、减。。。。。 超出指令范围内的操作不能被执行
不同厂商上产的芯片，构造可能不同，指令集也可能不同
一个程序在两个芯片上都能执行，就跨平台
一个程序在一个芯片上能执行，改改后再另一个芯片上也能执行  叫移植
cpu要进行运算 需要有数据，就要从存储器中拿数据，不能乱拿 要知道去存储器的哪拿数据，因此cpu就要能识别存储器的每一个存储空间
怎么被识别？  地址
cpu要实现内存的每一个单元用一个标记来进行标示（员工有工位一样，根据工位就能找到你），在某一时刻知道去哪个单元取数据。cpu和内存都有很多针脚。cpu与内存通过地址总线相连接（通过某些控制器连起来）。32位的系统cpu和内存有32条地址总线相连接，也就是能存储2^32的数据（能找到内存2^32个存储单元
），也就是4G。所以32位系统的内存最大4G。一次能处理的cpu的位数，叫做字长
cpu能使用多少内存空间取决于cpu的字长
程序是由指令和数据组成的
cpu执行程序：
1.控制器控制去内存中存取数据，在内存中哪里去找数据，
2.取指令
3.运算
4.存到空闲内存
cpu——&gt;地址总线——&gt;内存控制器（因为向内存中写、读的危险度不一样，不能肆意更改数据，进行内存保护）——&gt;总线——&gt;内存
内存是一个编址的存储单元，每个单元都有地址，十六进制数字
内存是一时性的存储，取一次数据后必须立即充电，才能保持原来的数据。因为把里面的电信号拿到后，里面的电信号就不存在了，所以是每秒按照多少Hz的频率来进行不停的刷新，才能存数据，因此一断电数据就全没了。因此我们不可能把要执行的程序放到内存里面，因此需要I/O设备（键盘、鼠标、硬盘、显示器）。</p>

<p>中断的意思是 临时打个岔，中途去做别的事情，然后再回来。
当中断产生，cpu就把下一条指令的地址，连同各个寄存器的内容都临时保存起来，叫做现场保护。
在处理完中断的事情后，要有一条中断返回指令。让cpu回去接着处理没有处理完的工作
每个I/O设备要连接也有针脚，连到计算机线路上。都是通过主板上的总线进行连接。当我们点击了鼠标、敲了键盘，cpu必须能捕获这些事件（I/O event），以便随时进行交互
如何实现：一个朋友来找你，怎么一找就找到，事先告诉我，你什么时候来找我。门铃一响，我就知道是来找我了 。我们的状态就是监听状态，门铃一响我们就可以做出相应。睡着了就听不见了，必须实时进行监听。这种机制在cpu上 我们叫做poll机制，就是轮询。不听的监听着每一个设备。现在有四个I/O设备，就意味着cpu要一直对着4个设备进行监听，但是cpu还要干别的。cpu的重要功能，是做有效的生产性的计算的，不是把大量时间放在监听上。  因此cpu还是继续自己的任务，当有I/O的时候，中断 interrupt
那中断是怎么在cpu上工作。
有一个中断控制器，控制器上有很多针脚。I/O设备会到中断控制器上注册使用，连接针脚。连接好后中断控制器就知道针脚上连的是谁。我们敲键盘，有电气信号传给中断控制器，然后传给cpu，cpu知道有一个中断信号。因为是注册使用，所以知道是哪个设备产生的事件。
但是这只告诉了cpu，键盘有人敲了，但是不知道敲的哪个键。因此还需要其他机制告诉cpu敲的是哪个键。 每个硬件设备都有很多针脚，有些是来控制和中断的，有些是来传递数据的。键盘是串行的，不可能一下两个键。敲键盘的时候，要怎么传给cpu，cpu要执行什么操作。因此当中断信号发出后，cpu要把数据取出来，放到内存中。到哪取数据（怎么知道是键盘的数据传输线，cpu上没有针脚和键盘直接连接，都是和总线连接） 因此就要用到I/O端口。所以主机启动时，每一个硬件设备都会向主机总线注册一个I/O端口。cpu就在I/O端口取数据。每个硬件设备的端口是有限的。16位就有65530多个端口
假如cpu正在执行计算，突然被中断了，这时候正在干的事要停下来
端口也是寄存器。类似于单位门口的传达室。来进行cpu和设备的数据交流</p>

<p>高级语言计算机不懂，要翻译
1.边翻译边执行 解释性语言
2.全部翻译在执行 编译性语言
批处理作业：
在早期通过磁带输入输出的时候，在磁带输入数据和输出数据的时候，cpu都是空闲的，在等待数据的输入和输出。因此我们要在磁带上放多个作业。执行完第一个作业，按顺序直接执行第二个，第一个在输出，第二个在执行，充分利用cpu（有先后顺序），在某一时刻计算机只有一个作业（因为cpu的处理速度远远快于其他硬件的速度）</p>

<p>随着cpu计算能力的增强，输出1s  计算1ms  输出1s  cpu还是在浪费。如果让cpu同时运行多个程序就能充分利用cpu，就是多任务系统。
如果第一个任务在使用的时候，并不知道第二个任务的存在，都要从内存的最初开始，就会打架（程序员写程序的时候，并不知道还有其他的程序在使用内存，于是就从0开始用内存，开始用cpu，就和其他程序冲突）因此我们需要一个监控程序</p>

<!-- UY BEGIN -->
<div id="uyan_frame"></div>
<script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2098800"></script>

<!-- UY END -->
]]></content>
  </entry>
  
</feed>
